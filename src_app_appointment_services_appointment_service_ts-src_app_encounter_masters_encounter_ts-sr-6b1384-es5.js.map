{"version":3,"sources":["webpack:///src/app/appointment/masters/appointment.ts","webpack:///src/app/appointment/services/appointment.service.ts","webpack:///src/app/encounter/masters/consultant.ts","webpack:///src/app/encounter/masters/encounter.ts","webpack:///src/app/encounter/masters/visit.ts","webpack:///src/app/encounter/services/consultant.service.ts","webpack:///src/app/encounter/services/encounter.service.ts"],"names":["Appointment","branch","Branch","department","Department","unit","Unit","doctor","Employee","patient","Patient","fromDate","Date","toDate","appointment","appointmentDateTime","visitDate","BaseEntity","AppointmentService","http","mainService","baseUrl","getBaseUrl","startTime","endTime","interval","get","post","selectedDate","doctorId","departmentId","branchId","appointmentId","put","HttpClient","MainService","Injectable","providedIn","Consultant","serviceCenter","ServiceCenter","Encounter","consultant","paymentType","LookupEntity","billing","expectedTimeForConsultation","consultantType","encounterTime","encounterStatus","encounterDate","visit","Visit","visitType","patientCategory","patientStatus","clearedDateTime","visitPatientStatus","markedForDischargeDate","validDate","ConsultantService","EncounterService","encounter","console","error","encounterId"],"mappings":"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","file":"src_app_appointment_services_appointment_service_ts-src_app_encounter_masters_encounter_ts-sr-6b1384-es5.js","sourcesContent":["import { BaseEntity } from \"../../master/masters/base-entity\";\r\nimport { Department } from \"../../master/department/masters/department\";\r\nimport { LookupEntity } from \"../../master/lookup-module/masters/lookup-entity\";\r\nimport { Branch } from \"../../master/service-center/masters/branch\";\r\nimport { Employee } from \"../../master/unit-master/masters/Employee\";\r\nimport { Unit } from \"../../master/unit-master/masters/unit\";\r\nimport { Patient } from \"../../patient/master/patient\";\r\n\r\n\r\nexport class Appointment extends BaseEntity{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t}\r\n\tappointmentId: number;\r\n\tbranch: Branch = new Branch();\r\n\tdepartment :Department = new Department();\r\n\tunit: Unit = new Unit();\r\n\tdoctor: Employee = new Employee();\r\n\tpatient: Patient = new Patient();\r\n\tfromDate : Date = new Date();\r\n\ttoDate : Date = new Date();\r\n\tappointment : String = \"appointment\";\r\n\tappointmentDateTime: Date = new Date() ;\r\n\tappointmentStatus : LookupEntity;\r\n\tappointmentStatusType : LookupEntity;\r\n\tvisitDate: Date = new Date();\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { MainService } from '../../main.service';\r\nimport { Appointment } from '../masters/appointment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppointmentService {\r\n  baseUrl = \"\";\r\n  constructor(private http: HttpClient,private mainService: MainService\t\r\n\t) {\r\n\t\tthis.baseUrl = this.mainService.getBaseUrl();  }\r\n  getAppointmentTimeList(startTime,endTime,interval): any{\r\n\treturn this.http.get(`${this.baseUrl}/appointmentTimeList/${startTime}/${endTime}/${interval}`);\r\n}\r\n\tcreateAppointment(appointment): any{\r\n\t\treturn this.http.post(`${this.baseUrl}/appointment/add`,appointment);\r\n\t}\r\n\tgetAppointmentList(): any{\r\n\t\treturn this.http.get(`${this.baseUrl}/appointment/get`);\r\n\t}\r\n\t\r\n\tgetAppointmentListByFilter(selectedDate,doctorId,departmentId,branchId):any{\r\n\t\treturn this.http.get(`${this.baseUrl}/appointmentList/${selectedDate}/${doctorId}/${departmentId}/${branchId}`)\r\n\t}\r\n\t\r\n\t\r\n\tupdateAppointment(appointmentId, appointment: Appointment):any{\r\n\t\treturn this.http.put(`${this.baseUrl}/appointment/update/${appointmentId}`,appointment);\r\n\t}\r\n\tdeleteAppointment(appointmentId): any{\r\n\t\treturn this.http.delete(`${this.baseUrl}/appointment/${appointmentId}`);\r\n\t}\r\n}\r\n","import { ServiceCenter } from \"../../master/service-center/masters/service-center\";\r\n\r\nexport class Consultant {\n\tconsultantId: number;\n\tserviceCenter: ServiceCenter = new ServiceCenter;\n\tconsultantName: string;\n\tfirstVisitFee: string;\n\tfollowupVisitFee: string;\n\testablishVisitFee: string;\n\t\n}\n","import { Appointment } from \"../../appointment/masters/appointment\";\r\nimport { Department } from \"../../master/department/masters/department\";\r\nimport { LookupEntity } from \"../../master/lookup-module/masters/lookup-entity\";\r\nimport { ServiceCenter } from \"../../master/service-center/masters/service-center\";\r\nimport { Patient } from \"../../patient/master/patient\";\r\nimport { Consultant } from \"./consultant\";\r\nimport { Visit } from \"./visit\";\r\n\r\nexport class Encounter {\n\tencounterId : number;\n\tdepartment: Department = new Department;\n\tserviceCenter: ServiceCenter = new ServiceCenter;\n\tconsultant: Consultant = new Consultant;\n\tprintCaseSheet: boolean;\n\tpaymentType: LookupEntity = new LookupEntity;\n\tbilling: LookupEntity = new LookupEntity;\n\tcomplaints: String;\n\twaitingPatientsForConsultation: Array<Patient>;\n\texpectedTimeForConsultation: Date = new Date();\n\tappointmentOrderedCptCode: String;\n\teligibilityNumber: String;\n\tconsultationCategory: String;\n\tconsultantType: LookupEntity = new LookupEntity;\n\tcptCode: String;\n\tmailSend: boolean;\n\tpatient: Patient = new Patient;\r\n\tencounterTime: Date = new Date();\r\n\tappointment : Appointment = new Appointment;\r\n\tencounterStatus : LookupEntity = new LookupEntity();\r\n\tencounterDate: Date = new Date();\r\n\tqueueNo: number;\r\n\tvisit: Visit = new Visit();\r\n\t\n}\n","import { LookupEntity } from \"../../master/lookup-module/masters/lookup-entity\";\r\nimport { Patient } from \"../../patient/master/patient\";\r\n\r\nexport class Visit{\r\n\tvisitId: number;\r\n\tpatientName: string;\r\n\tage: number;\r\n\tvisitStatus: string;\r\n\tisVisited: boolean;\r\n\tlastModifiedBy: number;\r\n\tvisitType: LookupEntity  = new LookupEntity();\r\n\tpatientCategory: LookupEntity = new LookupEntity();\r\n\tpaymentType : LookupEntity  = new LookupEntity;\r\n\tpatientStatus: LookupEntity = new LookupEntity;\r\n\tinsuredYesNo: boolean;\r\n\tpatient: Patient = new Patient;\r\n\tvisitDate: Date = new Date();\r\n\tpatientVisitId: string;\r\n\tvisitCleared: boolean;\r\n\tvisitClearanceRemarks: string;\r\n\tclearedBy: number;\r\n\tclearedDateTime: Date = new Date();\r\n\tisReceived: boolean;\r\n\tvisitPatientStatus: LookupEntity = new LookupEntity;\r\n\tmarkedForDischargeDate: Date = new Date();\r\n\tfollowUpVisit: boolean;\r\n\tweight: number;\r\n\tvalidDate: Date = new Date();\r\n\tencounterType : number;\r\n\tencounterStartType: number;\r\n\tencounterEndType: number;\r\n\t\r\n\t\r\n\t\r\n\t\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { MainService } from '../../main.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConsultantService {\r\n\tbaseUrl = \"\"\r\n  constructor(private http: HttpClient,private mainService: MainService\t\r\n\t) {\r\n\t\tthis.baseUrl = this.mainService.getBaseUrl();  }\r\n  getConsultantList(): any{\r\n\treturn this.http.get(`${this.baseUrl}/consultant/get`)\r\n}\r\n  \r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\nimport { MainService } from '../../main.service';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EncounterService {\r\n   \r\n\n private baseUrl = '';\n  constructor(private http:HttpClient,private mainService: MainService\t\r\n\t) {\r\n\t\tthis.baseUrl = this.mainService.getBaseUrl();  }\n  getEncounter(): any {\n\treturn this.http.get(`${this.baseUrl}/encounter/get`);\n  }\n  CreateEncounter(encounter):any{\n\tconsole.error(encounter)\n\treturn this.http.post(`${this.baseUrl}/encounter/create`,encounter);\n}\r\n getEncounterByAppointment(appointment: any) {\r\n        return this.http.get(`${this.baseUrl}/encounter/getByAppointment`,appointment)\r\n    }\r\n   \r\n\tgetEncounterById(encounterId):any{\r\n\t\treturn this.http.get(`${this.baseUrl}/encounter/getById/${encounterId}`)\r\n\t}\n}\n"]}